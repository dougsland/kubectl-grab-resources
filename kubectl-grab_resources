#!/usr/bin/env bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function usage {
    echo -e "Collects all resources from the cluster based on label input.\n"
    echo "Usage:"
    echo "	-h		Display this message"
    echo "	-l		Specify label"
    echo "	-o		Output YAML file"
    echo "Examples:"
    echo -e "\t kubectl grab-resources -l app=wiki"
    echo -e "\t kubectl grab-resources -l app=kibana -o output-app_kibana-2020-09-25-12:25:00.yaml"
    exit 1
}

RESOURCES="clusterrole, \
          clusterrolebinding, \
          configmap, \
          cronjob, \
          deployment, \
          hpa, \
          ingress, \
          ingressroute, \
          job, \
          pv, \
          pvc, \
          secret, \
          service, \
          serviceaccount, \
          statefulset, \
          daemonset"

RESOURCE_FOUND=""

function check_requirements {
    kubectl neat --help &> /dev/null
    if [[ $? != 0 ]]; then
        echo "kubectl neat is required! Visit https://krew.sigs.k8s.io/ for more info"
        echo "To install the krew neat plugin, use: kubectl krew install neat"
        exit 1
    fi
}

function collect_resources {
    # shellcheck disable=SC2001
    for resource in $(echo "$RESOURCES" | sed "s/,/ /g")
    do
        resource_name=$(kubectl get "${resource}" --all-namespaces --no-headers --selector="$1" -o custom-columns=":metadata.namespace, :metadata.name")
        if [[ -z "${resource_name}" ]]; then
            continue
        fi

        # converts result to an array, so we can loop
        namespace=($(echo "${resource_name}" | awk -F ' ' '{print $1}'))
        name=($(echo "${resource_name}" | awk -F ' ' '{print $2}'))

        for inner in "${!namespace[@]}"
        do
            inner_namespace=${namespace[$inner]}
            inner_name=${name[$inner]}

            cmd="kubectl get $resource ${inner_name} -o yaml"
            # if namespace is <none> don't use it
            if [ "${inner_namespace}" = "<none>" ]; then
                cmd="$cmd"
            else
                # shellcheck disable=SC2128
                cmd="$cmd -n $namespace"
            fi

            echo "---" >> "${OUTPUT_YAML}"
            $cmd 2>/dev/null | kubectl neat >> "${OUTPUT_YAML}"
            if [[ $? != 0 ]]; then
                echo "error: cannot execute kubectl neat command.."
                exit 1
            fi

            # display output to stdout
            msg="Packed ${inner_name} from ${resource}..."
            if [ -z "${inner_namespace}" ]
            then
                msg="${msg} namespace: ${inner_namespace}"
            fi
            echo "${msg}"

            if [ -z "${RESOURCE_FOUND}" ]
            then
                RESOURCE_FOUND="${resource}"
            else
                RESOURCE_FOUND="${RESOURCE_FOUND}, ${resource}"
            fi
        done
    done
}

function collect_customresroucedefition {
    # pack some of the CustomResourceDefinition implemented
    cdr_names=$(kubectl get customresourcedefinition -A --no-headers --selector="$1" -o custom-columns=":metadata.name")

    # shellcheck disable=SC2116
    for cdr_name in $(echo "${cdr_names}")
    do
        echo "---" >> "${OUTPUT_YAML}"
        kubectl get customresourcedefinitions "${cdr_name}" -o yaml | kubectl neat >> "${OUTPUT_YAML}"
        if [[ $? != 0 ]]; then
            echo "cannot execute kubectl command.."
            exit 1
        fi
        # shellcheck disable=SC2128
        echo "Packed ${name} from customresourcedefinitions..."
   done
}

function main {
    if [[ ! -n "$1" ]]; then
        usage
    fi

    while getopts "ho:l:" opt; do
        case "${opt}" in
            h)
                usage
                ;;
            o)
                OUTPUT_YAML="$OPTARG"
                ;;
            l) 
                LABEL="$OPTARG"
                ;;
            *)
                usage
                ;;
        esac
    done

    if [[ ! -n "${OUTPUT_YAML}" ]]; then
        OUTPUT_YAML="output-kubectl-grab-resources-$(date '+%Y-%m-%d-%H:%M:%S').yaml"
    fi

    if [[ ! -n "${LABEL}" ]] ; then
        usage
    fi
    check_requirements
    collect_resources "${LABEL}"
    collect_customresroucedefition "${LABEL}"

    NUMBER_RESOURCE=$(echo "$RESOURCE_FOUND" | wc -w)
    if [[ "${NUMBER_RESOURCE}" -gt 0 ]]; then
        echo "Exported resources based on label ${LABEL} via ${OUTPUT_YAML}"
    fi
}

main "$@"
